name: Test Release

on:
  # 手动触发测试发布流程
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for debugging)'
        required: false
        default: false
        type: boolean
  
  # 可选：在特定分支push时也触发（如果需要）
  # push:
  #   branches:
  #     - 'release/**'
  #     - 'test-release'

jobs:
  # Verify Node.js build before release
  verify-node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Run tests
        if: ${{ !inputs.skip_tests }}
        run: npm test || echo "No tests found, continuing..."
        
      - name: Verify package.json
        run: |
          echo "Verifying package.json..."
          if [ ! -f package.json ]; then
            echo "ERROR: package.json not found!"
            exit 1
          fi
          
          # Check if version exists
          VERSION=$(node -p "require('./package.json').version")
          if [ -z "$VERSION" ]; then
            echo "ERROR: No version found in package.json!"
            exit 1
          fi
          echo "Package version: $VERSION"
          
      - name: Dry run publish
        run: npm publish --dry-run

  # Verify Go build before release
  verify-go:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - name: Verify Go modules
        run: |
          echo "Verifying Go modules..."
          go mod verify
          go mod tidy
          if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
            echo "ERROR: go.mod or go.sum needs updating!"
            exit 1
          fi
          
      - name: Run Go tests
        run: go test ./... || echo "No tests found, continuing..."
      
      - name: Build and verify binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          echo "Building for $GOOS/$GOARCH..."
          
          # Determine binary name
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="git-status-dash-go-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
          else
            BINARY_NAME="git-status-dash-go-${{ matrix.goos }}-${{ matrix.goarch }}"
          fi
          
          # Build binary
          VERSION=${{ github.ref_name || 'v0.0.0-test' }}
          go build -ldflags="-s -w -X main.Version=$VERSION"             -o "$BINARY_NAME"             .
          
          # Verify binary was created
          if [ ! -f "$BINARY_NAME" ]; then
            echo "ERROR: Binary $BINARY_NAME was not created!"
            exit 1
          fi
          
          # Check file size
          SIZE=$(stat -c%s "$BINARY_NAME" 2>/dev/null || stat -f%z "$BINARY_NAME")
          echo "Binary size: $SIZE bytes"
          
          if [ "$SIZE" -lt 1000000 ]; then
            echo "ERROR: Binary seems too small (less than 1MB)!"
            exit 1
          fi
          
          # For native platform, test execution
          if [ "$GOOS" = "$(go env GOOS)" ] && [ "$GOARCH" = "$(go env GOARCH)" ]; then
            echo "Testing binary execution..."
            ./$BINARY_NAME --version || echo "Version flag not implemented"
          fi

  build-go-binaries:
    needs: verify-go
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - name: Build Go Binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          # Determine binary name
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="git-status-dash-go-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
          else
            BINARY_NAME="git-status-dash-go-${{ matrix.goos }}-${{ matrix.goarch }}"
          fi
          
          # Build with version info
          VERSION=${{ github.ref_name || 'v0.0.0-test' }}
          go build -ldflags="-s -w -X main.Version=$VERSION"             -o "$BINARY_NAME"             .
          
          # Create checksum
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "$BINARY_NAME" > "$BINARY_NAME.sha256"
          else
            shasum -a 256 "$BINARY_NAME" > "$BINARY_NAME.sha256"
          fi
      
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: git-status-dash-go-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            git-status-dash-go-*
            *.sha256

  verify-release-assets:
    needs: [verify-node, build-go-binaries]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare and Verify Release Assets
        run: |
          # Create release directory
          mkdir -p release-assets
          
          # Move all binaries to release directory
          echo "Moving binaries to release directory..."
          for dir in artifacts/git-status-dash-go-*; do
            if [ -d "$dir" ]; then
              echo "Processing $dir..."
              mv "$dir"/* release-assets/ || true
            fi
          done
          
          # List all assets
          echo "Prepared release assets:"
          ls -la release-assets/
          
          # Verify all expected binaries exist
          EXPECTED_BINARIES=(
            "git-status-dash-go-linux-amd64"
            "git-status-dash-go-linux-arm64"
            "git-status-dash-go-darwin-amd64"
            "git-status-dash-go-darwin-arm64"
            "git-status-dash-go-windows-amd64.exe"
          )
          
          for binary in "${EXPECTED_BINARIES[@]}"; do
            if [ ! -f "release-assets/$binary" ]; then
              echo "ERROR: Expected binary $binary not found!"
              exit 1
            fi
            echo "Found $binary"
          done
          
          # Create a combined checksums file
          cd release-assets
          cat *.sha256 > checksums.txt
          cd ..

          echo "------------------------------------------------"
          echo "Test release process finished successfully."
          echo "The following files were built and verified:"
          ls -lR release-assets/ 