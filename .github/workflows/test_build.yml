name: Test Build

on:
  push:
    branches: ['**']
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Go Lint & Test
        run: |
          go mod tidy
          if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
            echo "ERROR: go.mod or go.sum needs updating! Please run 'go mod tidy' and commit."
            exit 1
          fi
          go test ./...

      - name: Go Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          BINARY_NAME="git-status-dash-go-${{ matrix.goos }}-${{ matrix.goarch }}"
          [ "${{ matrix.goos }}" = "windows" ] && BINARY_NAME="${BINARY_NAME}.exe"
          go build -ldflags="-s -w" -o "$BINARY_NAME" .
          
          SIZE=$(stat -c%s "$BINARY_NAME" 2>/dev/null || stat -f%z "$BINARY_NAME")
          if [ "$SIZE" -lt 1000000 ]; then
            echo "ERROR: Binary for ${{ matrix.goos }}/${{ matrix.goarch }} is too small (<1MB)!"
            exit 1
          fi
          echo "âœ“ Built ${{ matrix.goos }}/${{ matrix.goarch }} binary successfully (${SIZE} bytes)."

      - name: Node.js Install, Lint & Test
        run: |
          npm install --ignore-scripts
          
          # Lint without config file
          npx eslint@8 --ext .js,.mjs .
          
          # Run tests if they exist
          npm test || echo "No Node.js tests found, continuing..."

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          ignore-unfixed: true
          format: 'table'
          vuln-type: 'os,library' 