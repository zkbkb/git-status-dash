name: Test Build

on:
  push:
    branches: ['**']
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          echo "üì¶ Installing Node.js dependencies..."
          npm ci --ignore-scripts || npm install --ignore-scripts
          
      - name: Run Go Tests
        run: |
          echo "üß™ Running Go tests..."
          go mod tidy
          if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
            echo "‚ùå ERROR: go.mod or go.sum needs updating! Please run 'go mod tidy' and commit."
            exit 1
          fi
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Run Node.js Linting
        run: |
          echo "üîç Running ESLint..."
          npm run lint

      - name: Run Node.js Tests
        run: |
          echo "üß™ Running Node.js tests..."
          npm test

  build:
    name: Build (${{ matrix.os }}-${{ matrix.arch }})
    needs: lint-and-test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build Binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          echo "üî® Building for ${{ matrix.os }}/${{ matrix.arch }}..."
          BINARY_NAME="git-status-dash-go-${{ matrix.os }}-${{ matrix.arch }}"
          [ "${{ matrix.os }}" = "windows" ] && BINARY_NAME="${BINARY_NAME}.exe"
          
          go build -ldflags="-s -w" -o "$BINARY_NAME" .
          
          # Verify binary size
          SIZE=$(stat -c%s "$BINARY_NAME" 2>/dev/null || stat -f%z "$BINARY_NAME")
          if [ "$SIZE" -lt 1000000 ]; then
            echo "‚ùå ERROR: Binary is too small (<1MB)!"
            exit 1
          fi
          
          echo "‚úÖ Built successfully ($(($SIZE / 1024 / 1024)) MB)"
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-${{ matrix.arch }}
          path: git-status-dash-go-*
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Display Trivy Summary
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          ignore-unfixed: true
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'

  summary:
    name: Build Summary
    if: always()
    needs: [lint-and-test, build, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Check Results
        run: |
          echo "üìä Build Summary"
          echo "================"
          
          if [ "${{ needs.lint-and-test.result }}" = "success" ]; then
            echo "‚úÖ Lint & Test: Passed"
          else
            echo "‚ùå Lint & Test: Failed"
          fi
          
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "‚úÖ Build: All platforms built successfully"
          else
            echo "‚ùå Build: Some platforms failed"
          fi
          
          if [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "‚úÖ Security: No critical vulnerabilities found"
          else
            echo "‚ö†Ô∏è  Security: Issues detected"
          fi
          
          # Fail if any job failed
          if [ "${{ needs.lint-and-test.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            exit 1
          fi 